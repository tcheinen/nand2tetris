plugins {
    id 'java'
    id 'distribution'
}

group 'com.nand2tetris'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

jar.enabled = false

tasks.register("Hack", Jar) {
    group = "build"
    archiveFileName = "Hack.jar"
    from(sourceSets.main.output) {
        include "Hack/**"
    }
}

tasks.register("HackGUI", Jar) {
    group = "build"
    archiveFileName = "HackGUI.jar"
    from(sourceSets.main.output) {
        include "HackGUI/**"
    }
}


tasks.register("Compilers", Jar) {
    group = "build"
    archiveFileName = "Compilers.jar"
    from(sourceSets.main.output) {
        include "Hack/Assembler/**"
        include "Hack/Compiler/**"
        include "Hack/VirtualMachine/**"
    }
}

tasks.register("Simulators", Jar) {
    group = "build"
    archiveFileName = "Simulators.jar"
    from(sourceSets.main.output) {
        include "Hack/CPUEmulator/**"
        include "Hack/Gates/**"
        include "Hack/HardwareSimulator/**"
        include "Hack/VMEmulator/**"
    }
}

tasks.register("SimulatorsGUI", Jar) {
    group = "build"
    archiveFileName = "SimulatorsGUI.jar"
    from(sourceSets.main.output) {
        include "SimulatorsGUI/**"
    }
}

tasks.register("runCPUEmulator", JavaExec) {
    classpath sourceSets.main.output
    workingDir "src/main/resources"
    main "CPUEmulatorMain"
}

tasks.register("runHardwareSimulator", JavaExec) {
    dependsOn unzipViz
    classpath sourceSets.main.output
    workingDir "$buildDir/resources/main"
    main "HardwareSimulatorMain"
}

tasks.register("runTextComparer", JavaExec) {
    classpath sourceSets.main.output
    workingDir "src/main/resources"
    main "TextComparer"
}

tasks.register("runVMEmulator", JavaExec) {
    classpath sourceSets.main.output
    workingDir "src/main/resources"
    main "VMEmulatorMain"
}

distributions {
    main {
        distributionBaseName = 'nand2tetris'
        contents {

            // 1. copy resources into dist zip root -- currently this is just the install dir
            from("$buildDir/resources/main") {
                into('.')
            }

            // 2. copy classes from root of compile source -- this covers the classes with a main function
            from("$buildDir/classes/java/main") {
                include "*.class"
                into("./bin/classes")
            }

            // 3. copy built in chips/vm codes into the appropriate folder
            from("$buildDir/classes/java/main/builtInChips") {
                include "*.class"
                into("./builtInChips")
            }
            from("$buildDir/classes/java/main/builtInVMCode") {
                include "*.class"
                into("./builtInVMCode")
            }

            // 4. copy any built jars into lib folder
            for (t in tasks.withType(Jar).matching { it.enabled == true }) {
                from(t) {
                    into('./bin/lib/.')
                }
            }

        }
    }
}

task downloadViz {
    doLast {
        String url = "https://github.com/jainpranav1/HDL-Viz-Project/releases/download/v0.1.3-alpha/visualizer.zip";
        def zipFile = new File("$buildDir/visualizer.zip")
        zipFile.createNewFile();
        new URL(url).withInputStream { i -> zipFile.withOutputStream { it << i } }
    }
}

task unzipViz(type: Copy) {
        def zipFile = new File("$buildDir/visualizer.zip")

        def outputDir = file("${buildDir}/resources/main/bin/visualizer")

        from zipTree(zipFile)
        into outputDir
}
unzipViz.dependsOn 'downloadViz'

distZip {
    dependsOn tasks.withType(Jar).matching { it.enabled == true }
    dependsOn tasks.withType(Copy).matching { it.enabled == true }
}



dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}
